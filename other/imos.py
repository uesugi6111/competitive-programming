# いもす法
# いもす法とは、長さ N の1次元配列において、「ある連続する区間に、ある数vを足す」という操作を
# K 回繰り返した結果を、計算量 O(N + K) で高速に構築できる方法。

# いもす法の手順
# ステップ1: 加算処理
#  区間 [l, r] に v を加算したいとき、
#  l 番目の値に v を加算する
#  r+1 番目の値に -v を加算する
# ステップ2: 累積和
#  最後に累積和をすると、最終結果を得られる

# 例
# 長さ7のリストにおいて、
# 区間[1, 3]に2を加算
# 区間[3, 3]に3を加算
# 区間[0, 5]に1を加算
# という3つの操作をしたときの最終結果を得たいとする。

from itertools import accumulate
# 初期化
n=7
data=[0]*n
# 区間[l, r]にvを加算
for i in range(3):
    l,r,v=map(int,input().split())
    data[l]+=v
    if r+1!=n:
        data[r+1]-=v
# 累積和
cumsum=list(accumulate(data))
# 最終結果を出力
print(cumsum)

# 入力
"""
1 3 2
3 3 3
0 5 1
"""
# 実行結果
# [1, 3, 3, 6, 1, 1, 0]


# 2 次元いもす
# 